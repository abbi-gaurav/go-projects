* variables
* struct types
- alignment, padding
  - every 2 byte value must fall on a 2 byte boundry
- define structs with higher and similiar types first
- padding for struct is the padding of the highest size member
* Pointers
- in go it is always pass by value
- sharing a value across program boundries
- each goroutine gets a stack of size 2k
  - each stack can grow to a bigger size
  - pointers cannot be shared across goroutine stack
  - stack memory cannot be shared among go routine
- every function is given stackframe
  - size of each stackframe is known at compile time
* constants
- typed ~const x int = 9~
- untyped *kind* ~cons x = 9~
  - precision can be upto 256 bits
- type promotes over kind
- only exist at compile time
* Functions
- return 2 when second is error
- factory functions
- farther the variable name from usage, longer it should be
- blank variable
- compact if syntax
~if _, err := getUser(); err != nil {~
  ~fmt.println(err)~
  ~return~
~}~
* Data Structures
- write code that is symphatetic with cache system
* goroutine
- When a function is created as a goroutine, it’s treated as an independent unit of work that gets scheduled and then executed on an available logical processor
- go runtime scheduler
  - manages goroutines
  - sits on top of the operating system
  - binding operating system’s threads to logical processors which, in turn, execute goroutines.
  - Each logical processor is individually bound to a single operating system thread.
  - default is to allocate a logical processor for every physical processor that’s available.
- CSP *communicating sequential processes*
  - message-passing model that works by communicating data between goroutines
- Blocking calls
  - Thread and goroutine is detached from the logical processor. Thread continue to wait for the syscall to return.
  - The logical processor is attached to a new thread.
- IO call
  - the goroutine is detached from the logical processor and moved to the runtime integrated network poller.
  - once poller indicates read/write op is ready, goroutine is assigned back to the logical processor.
* Channels
- unbuffered channel
  - is a channel with no capacity to hold any value before it’s received
  - sending and receiving goroutine to be ready at the same instant before any send or receive operation can complete.
- synchronize goroutines as they send and receive the resources they need to share between each other.
- When a resource needs to be shared between goroutines, channels act as a conduit between the goroutines and provide a mechanism that guarantees a synchronous exchange.
- When a channel is closed, goroutines can still perform receives on the channel but can no longer send on the channel
* interfaces
- if you implement an interface using a pointer receiver, then only pointers of that type implement the interface. If you implement an interface using a value receiver, then both values and pointers of that type implement the interface.
* type embedding
- take existing types and both extend and change their behavior.
- It works by taking an existing type and declaring that type within the declaration of a new struct type.
- The type that is embedded is then called an inner type of the new outer type.
