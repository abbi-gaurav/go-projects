/*
My awesome controller
*/
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	awesomecontrolleriov1 "github.com/abbi-gaurav/go-learning-projects/my-awesome-controller/pkg/apis/awesome.controller.io/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCakes implements CakeInterface
type FakeCakes struct {
	Fake *FakeAwesomeV1
	ns   string
}

var cakesResource = schema.GroupVersionResource{Group: "awesome.controller.io", Version: "v1", Resource: "cakes"}

var cakesKind = schema.GroupVersionKind{Group: "awesome.controller.io", Version: "v1", Kind: "Cake"}

// Get takes name of the cake, and returns the corresponding cake object, and an error if there is any.
func (c *FakeCakes) Get(name string, options v1.GetOptions) (result *awesomecontrolleriov1.Cake, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(cakesResource, c.ns, name), &awesomecontrolleriov1.Cake{})

	if obj == nil {
		return nil, err
	}
	return obj.(*awesomecontrolleriov1.Cake), err
}

// List takes label and field selectors, and returns the list of Cakes that match those selectors.
func (c *FakeCakes) List(opts v1.ListOptions) (result *awesomecontrolleriov1.CakeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(cakesResource, cakesKind, c.ns, opts), &awesomecontrolleriov1.CakeList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &awesomecontrolleriov1.CakeList{ListMeta: obj.(*awesomecontrolleriov1.CakeList).ListMeta}
	for _, item := range obj.(*awesomecontrolleriov1.CakeList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested cakes.
func (c *FakeCakes) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(cakesResource, c.ns, opts))

}

// Create takes the representation of a cake and creates it.  Returns the server's representation of the cake, and an error, if there is any.
func (c *FakeCakes) Create(cake *awesomecontrolleriov1.Cake) (result *awesomecontrolleriov1.Cake, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(cakesResource, c.ns, cake), &awesomecontrolleriov1.Cake{})

	if obj == nil {
		return nil, err
	}
	return obj.(*awesomecontrolleriov1.Cake), err
}

// Update takes the representation of a cake and updates it. Returns the server's representation of the cake, and an error, if there is any.
func (c *FakeCakes) Update(cake *awesomecontrolleriov1.Cake) (result *awesomecontrolleriov1.Cake, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(cakesResource, c.ns, cake), &awesomecontrolleriov1.Cake{})

	if obj == nil {
		return nil, err
	}
	return obj.(*awesomecontrolleriov1.Cake), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeCakes) UpdateStatus(cake *awesomecontrolleriov1.Cake) (*awesomecontrolleriov1.Cake, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(cakesResource, "status", c.ns, cake), &awesomecontrolleriov1.Cake{})

	if obj == nil {
		return nil, err
	}
	return obj.(*awesomecontrolleriov1.Cake), err
}

// Delete takes name of the cake and deletes it. Returns an error if one occurs.
func (c *FakeCakes) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(cakesResource, c.ns, name), &awesomecontrolleriov1.Cake{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCakes) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(cakesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &awesomecontrolleriov1.CakeList{})
	return err
}

// Patch applies the patch and returns the patched cake.
func (c *FakeCakes) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *awesomecontrolleriov1.Cake, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(cakesResource, c.ns, name, data, subresources...), &awesomecontrolleriov1.Cake{})

	if obj == nil {
		return nil, err
	}
	return obj.(*awesomecontrolleriov1.Cake), err
}
