/*
My awesome controller
*/
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/abbi-gaurav/go-learning-projects/my-awesome-controller/pkg/apis/awesome.controller.io/v1"
	scheme "github.com/abbi-gaurav/go-learning-projects/my-awesome-controller/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// CakesGetter has a method to return a CakeInterface.
// A group's client should implement this interface.
type CakesGetter interface {
	Cakes(namespace string) CakeInterface
}

// CakeInterface has methods to work with Cake resources.
type CakeInterface interface {
	Create(*v1.Cake) (*v1.Cake, error)
	Update(*v1.Cake) (*v1.Cake, error)
	UpdateStatus(*v1.Cake) (*v1.Cake, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.Cake, error)
	List(opts metav1.ListOptions) (*v1.CakeList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Cake, err error)
	CakeExpansion
}

// cakes implements CakeInterface
type cakes struct {
	client rest.Interface
	ns     string
}

// newCakes returns a Cakes
func newCakes(c *AwesomeV1Client, namespace string) *cakes {
	return &cakes{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the cake, and returns the corresponding cake object, and an error if there is any.
func (c *cakes) Get(name string, options metav1.GetOptions) (result *v1.Cake, err error) {
	result = &v1.Cake{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("cakes").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Cakes that match those selectors.
func (c *cakes) List(opts metav1.ListOptions) (result *v1.CakeList, err error) {
	result = &v1.CakeList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("cakes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested cakes.
func (c *cakes) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("cakes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a cake and creates it.  Returns the server's representation of the cake, and an error, if there is any.
func (c *cakes) Create(cake *v1.Cake) (result *v1.Cake, err error) {
	result = &v1.Cake{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("cakes").
		Body(cake).
		Do().
		Into(result)
	return
}

// Update takes the representation of a cake and updates it. Returns the server's representation of the cake, and an error, if there is any.
func (c *cakes) Update(cake *v1.Cake) (result *v1.Cake, err error) {
	result = &v1.Cake{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("cakes").
		Name(cake.Name).
		Body(cake).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *cakes) UpdateStatus(cake *v1.Cake) (result *v1.Cake, err error) {
	result = &v1.Cake{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("cakes").
		Name(cake.Name).
		SubResource("status").
		Body(cake).
		Do().
		Into(result)
	return
}

// Delete takes name of the cake and deletes it. Returns an error if one occurs.
func (c *cakes) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("cakes").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *cakes) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("cakes").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched cake.
func (c *cakes) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Cake, err error) {
	result = &v1.Cake{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("cakes").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
